services:
  #################
  # Database (PostgreSQL)
  #################
  db:
    image: postgres:16-alpine # Using Alpine for smaller size
    container_name: ugm_aicare_db_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # Use default if not set in .env
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata_dev:/var/lib/postgresql/data # Persist data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network_dev

  #################
  # Cache (Redis)
  #################
  redis:
    image: redis/redis-stack-server:latest
    container_name: ugm_aicare_redis_dev
    volumes:
      - redisdata_dev:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network_dev

  #################
  # Object Storage (MinIO)
  #################
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: ugm_aicare_minio_dev
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data_dev:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    restart: unless-stopped
    networks:
      - internal_network_dev

  #################
  # Migration Service
  #################
  migrate:
    container_name: ugm_aicare_migrate_dev
    build:
      context: ./backend
      dockerfile: app/Dockerfile.migrate  # Use lightweight migration-only Dockerfile
    entrypoint: >
      bash -c "
        /app/scripts/wait-for-it.sh db:5432 -t 60 -- echo 'Database is ready!' &&
        echo 'Running Alembic migrations...' &&
        alembic upgrade head
      "
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal_network_dev

  #################
  # Backend (FastAPI)
  #################
  backend:
    container_name: ugm_aicare_backend_dev
    build:
      context: ./backend
      dockerfile: app/Dockerfile
    # Override CMD for development with hot reload
    command: >
      bash -c "
        echo 'ðŸš€ Starting backend with hot reload...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/app --log-level info
      "
    ports:
      - "8000:8000"
    # Resource limits to prevent memory issues
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      ALLOWED_ORIGINS: "https://aicare.ina17.com,http://localhost:4000,http://127.0.0.1:4000,http://localhost:3000,http://127.0.0.1:3000,http://frontend:4000,http://backend:8000"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: ""
      REDIS_PASSWORD: ""
      REDIS_URL: ""
      APP_ENV: development # Explicitly set for development
      PYTHONPATH: /app
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-content-resources}
      MINIO_SECURE: ${MINIO_SECURE:-false}
    volumes:
      - ./backend:/app # Mount backend code for live reloading
      - /app/.venv # Exclude virtual env from mount
      - /app/__pycache__ # Exclude pycache
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    restart: unless-stopped
    networks:
      internal_network_dev: {}
    dns: 8.8.8.8

  #################
  # Frontend (Next.js)
  #################
  frontend:
    container_name: ugm_aicare_frontend_dev
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development # Assuming a development stage in Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "4000:3000"
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    env_file:
      - .env
    environment:
      NODE_ENV: development
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      INTERNAL_API_URL: http://backend:8000
    volumes:
      - ./frontend:/app # Mount frontend code for live reloading
      - /app/node_modules # Exclude node_modules from host mount
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - internal_network_dev

volumes:
  pgdata_dev:
  redisdata_dev:
  minio_data_dev:

networks:
  internal_network_dev:
    driver: bridge
