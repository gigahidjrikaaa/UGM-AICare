/**
 * Sidebar component to display all SCA-generated intervention plans
 * Shows in /aika page as a toggleable side panel
 */

'use client';

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronRight, Sparkles, RefreshCw, AlertCircle } from 'lucide-react';
import { useInterventionPlans } from '@/hooks/useInterventionPlans';
import { PlanCard } from '@/components/resources/PlanCard';

interface InterventionPlansSidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

export const InterventionPlansSidebar: React.FC<InterventionPlansSidebarProps> = ({
  isOpen,
  onClose,
}) => {
  const { data, isLoading, error, refetch } = useInterventionPlans(true); // activeOnly = true

  const activePlans = data?.plans || [];
  const totalPlans = data?.total || 0;

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop - Click to close (mobile/tablet) */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/30 backdrop-blur-sm z-[60] lg:hidden"
            onClick={onClose}
            aria-hidden="true"
          />

          {/* Sidebar Panel */}
          <motion.aside
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'spring', damping: 30, stiffness: 300 }}
            className="fixed top-0 right-0 h-full w-full sm:w-[400px] lg:w-[420px] bg-white/95 backdrop-blur-xl border-l border-gray-200/50 shadow-2xl z-[60] flex flex-col"
          >
            {/* Close Button - Side Mounted */}
            <button
              onClick={onClose}
              className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-full bg-white/95 backdrop-blur-xl border border-r-0 border-gray-200/50 rounded-l-lg shadow-lg hover:bg-white transition-all duration-200 p-3 text-gray-600 hover:text-gray-900 group"
              aria-label="Close plans sidebar"
            >
              <ChevronRight className="w-5 h-5 group-hover:translate-x-0.5 transition-transform" />
            </button>
            {/* Header */}
            <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200/50 bg-gradient-to-r from-teal-50/80 to-blue-50/80">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-full bg-gradient-to-br from-teal-500 to-blue-500 flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">My Plans</h2>
                  <p className="text-xs text-gray-600">
                    {totalPlans} {totalPlans === 1 ? 'plan' : 'plans'} generated by Aika
                  </p>
                </div>
              </div>
            </div>

            {/* Info Banner */}
            <div className="px-6 py-3 bg-blue-50/50 border-b border-blue-100/50">
              <p className="text-xs text-blue-800 leading-relaxed">
                ðŸ’™ <strong>Support Coach Plans:</strong> Actionable steps generated when Aika
                detects you need extra support. Complete steps to track your progress!
              </p>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto px-6 py-4 space-y-4">
              {/* Loading State */}
              {isLoading && (
                <div className="flex flex-col items-center justify-center py-12 text-gray-500">
                  <RefreshCw className="w-8 h-8 animate-spin mb-3 text-teal-500" />
                  <p className="text-sm">Loading your plans...</p>
                </div>
              )}

              {/* Error State */}
              {error && !isLoading && (
                <div className="flex flex-col items-center justify-center py-12 text-center">
                  <AlertCircle className="w-12 h-12 text-red-400 mb-3" />
                  <p className="text-sm text-gray-700 font-medium mb-1">
                    Failed to load plans
                  </p>
                  <p className="text-xs text-gray-500 mb-4">
                    {error.message || 'Something went wrong'}
                  </p>
                  <button
                    onClick={refetch}
                    className="px-4 py-2 bg-teal-500 text-white text-sm rounded-lg hover:bg-teal-600 transition-colors shadow-sm"
                  >
                    Try Again
                  </button>
                </div>
              )}

              {/* Empty State */}
              {!isLoading && !error && activePlans.length === 0 && (
                <div className="flex flex-col items-center justify-center py-16 text-center px-4">
                  <div className="w-20 h-20 rounded-full bg-gradient-to-br from-teal-100 to-blue-100 flex items-center justify-center mb-4">
                    <Sparkles className="w-10 h-10 text-teal-600" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    No Active Plans Yet
                  </h3>
                  <p className="text-sm text-gray-600 leading-relaxed max-w-xs">
                    When you share moments of stress or distress with Aika, she&apos;ll generate
                    personalized support plans here to help you cope.
                  </p>
                  <div className="mt-6 p-4 bg-amber-50 rounded-lg border border-amber-200">
                    <p className="text-xs text-amber-800">
                      ðŸ’¡ <strong>Tip:</strong> Try saying &quot;I&apos;m stressed about my thesis&quot; or
                      &quot;I feel anxious today&quot; to trigger a plan!
                    </p>
                  </div>
                </div>
              )}

              {/* Plans List */}
              {!isLoading && !error && activePlans.length > 0 && (
                <>
                  {activePlans.map((plan) => (
                    <PlanCard key={plan.id} plan={plan} onUpdate={refetch} />
                  ))}
                </>
              )}
            </div>

            {/* Footer */}
            <div className="px-6 py-3 border-t border-gray-200/50 bg-gray-50/50">
              <button
                onClick={refetch}
                disabled={isLoading}
                className="w-full px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 shadow-sm"
              >
                <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
                Refresh Plans
              </button>
            </div>
          </motion.aside>
        </>
      )}
    </AnimatePresence>
  );
};
