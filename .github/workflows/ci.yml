name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      rollback_sha:
        description: 'Git SHA to rollback to (optional)'
        required: false
        type: string

jobs:
  build-test-scan-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # To push images to GHCR
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.rollback_sha)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: pip install -r requirements.txt
        working-directory: ./backend

      - name: Run backend tests (pytest)
        env:
          DATABASE_URL: "sqlite+aiosqlite:///test.db"
          EMAIL_ENCRYPTION_KEY: "example_encryption_key"
          JWT_SECRET_KEY: "a_very_long_and_secure_secret_key_for_testing_purposes"
        run: pytest
        working-directory: ./backend

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run frontend tests (npm test)
        run: npm test
        working-directory: ./frontend

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./infra/docker/backend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./infra/docker/frontend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/frontend:latest

      - name: Run Trivy vulnerability scan on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/backend:${{ github.sha }}'
          format: 'json'
          output: 'trivy-backend-results.json'
          exit-code: '0' # Don't fail on vulnerabilities
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Display Trivy results
        if: always()
        run: |
          if [ -f trivy-backend-results.json ]; then
            echo "=== Trivy Scan Results (Backend) ==="
            jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.VulnerabilityID) - \(.PkgName) \(.InstalledVersion) → \(.FixedVersion) [\(.Severity)]"' trivy-backend-results.json || echo "No HIGH/CRITICAL vulnerabilities found"
          fi

      - name: Check for fixable vulnerabilities
        id: check-vulns
        run: |
          if [ -f trivy-backend-results.json ]; then
            FIXABLE=$(jq '[.Results[]?.Vulnerabilities[]? | select(.FixedVersion != "")] | length' trivy-backend-results.json)
            echo "fixable_count=$FIXABLE" >> $GITHUB_OUTPUT
            if [ "$FIXABLE" -gt 0 ]; then
              echo "⚠️ Found $FIXABLE fixable vulnerabilities"
              echo "Run the 'Auto-Fix Security Vulnerabilities' workflow to automatically create a PR with fixes"
            fi
          fi

      - name: Fail if critical vulnerabilities exist
        run: |
          if [ -f trivy-backend-results.json ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-backend-results.json)
            if [ "$CRITICAL" -gt 0 ]; then
              echo "❌ Found $CRITICAL CRITICAL vulnerabilities!"
              exit 1
            fi
          fi

      - name: Run Trivy vulnerability scan on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}'
          format: 'json'
          output: 'trivy-frontend-results.json'
          exit-code: '0'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Display Trivy results (Frontend)
        if: always()
        run: |
          if [ -f trivy-frontend-results.json ]; then
            echo "=== Trivy Scan Results (Frontend) ==="
            jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.VulnerabilityID) - \(.PkgName) \(.InstalledVersion) → \(.FixedVersion) [\(.Severity)]"' trivy-frontend-results.json || echo "No HIGH/CRITICAL vulnerabilities found"
          fi

      - name: Fail if critical vulnerabilities exist (Frontend)
        run: |
          if [ -f trivy-frontend-results.json ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-frontend-results.json)
            if [ "$CRITICAL" -gt 0 ]; then
              echo "❌ Found $CRITICAL CRITICAL vulnerabilities in frontend!"
              exit 1
            fi
          fi

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build-test-scan-push
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && !github.event.inputs.rollback_sha)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export GHCR_USER=${{ github.actor }}
            export GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
            
            cd ${{ secrets.VM_PROJECT_PATH }}
            
            if [ -n "${{ secrets.ENV_FILE_PRODUCTION }}" ]; then
              echo "${{ secrets.ENV_FILE_PRODUCTION }}" > .env
            fi
            
            ./infra/scripts/deploy.sh ${{ github.sha }}

  rollback:
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback_sha
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rollback to previous SHA
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export GHCR_USER=${{ github.actor }}
            export GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
            
            cd ${{ secrets.VM_PROJECT_PATH }}
            
            if [ -n "${{ secrets.ENV_FILE_PRODUCTION }}" ]; then
              echo "${{ secrets.ENV_FILE_PRODUCTION }}" > .env
            fi
            
            ./infra/scripts/deploy.sh ${{ github.event.inputs.rollback_sha }}