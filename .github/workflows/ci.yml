name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      rollback_sha:
        description: 'Git SHA to rollback to (optional)'
        required: false
        type: string

jobs:
  # ========================================
  # OPTIMIZATION 4: Conditional Builds - Detect Changes
  # ========================================
  detect-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.rollback_sha)
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'infra/docker/backend.Dockerfile'
              - 'requirements.txt'
            frontend:
              - 'frontend/**'
              - 'infra/docker/frontend.Dockerfile'
              - 'package.json'
              - 'package-lock.json'

  # ========================================
  # OPTIMIZATION 3: Parallel Jobs - Backend Tests
  # ========================================
  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # OPTIMIZATION 1: Dependency Caching - pip
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: pip install -r requirements.txt
        working-directory: ./backend

      - name: Run backend tests (pytest)
        env:
          DATABASE_URL: "sqlite+aiosqlite:///test.db"
          EMAIL_ENCRYPTION_KEY: "example_encryption_key"
          JWT_SECRET_KEY: "a_very_long_and_secure_secret_key_for_testing_purposes"
        run: pytest
        working-directory: ./backend

  # ========================================
  # OPTIMIZATION 3: Parallel Jobs - Frontend Tests
  # ========================================
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # OPTIMIZATION 1: Dependency Caching - npm
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # OPTIMIZATION: Use npm ci instead of npm install
      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run frontend tests
        run: npm test
        working-directory: ./frontend

  # ========================================
  # OPTIMIZATION 3: Parallel Jobs - Build Backend
  # ========================================
  build-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend]
    if: |
      always() && 
      (needs.detect-changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped')
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          echo "=== Disk space before cleanup ==="
          df -h / | awk 'NR==1 || /\/$/'
          
          # Quick directory removal (fast, no package manager overhead)
          echo "=== Removing unnecessary directories ==="
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /opt/hostedtoolcache/CodeQL "$AGENT_TOOLSDIRECTORY" \
            /usr/share/swift /usr/local/julia* /opt/microsoft
          
          # Docker cleanup (often reclaims 5-10 GB)
          echo "=== Cleaning up Docker ==="
          docker system prune -af --volumes 2>/dev/null || true
          
          # Only remove packages that are commonly installed and large
          # Using a single apt-get command is much faster than multiple
          echo "=== Removing large packages ==="
          sudo apt-get remove -y --purge \
            azure-cli google-chrome-stable firefox powershell \
            'llvm-*' 'clang-*' 'php*' \
            mysql-server* mysql-client* \
            2>/dev/null || true
          
          sudo apt-get autoremove -y 2>/dev/null || true
          sudo apt-get clean
          
          echo "=== Disk space after cleanup ==="
          df -h / | awk 'NR==1 || /\/$/'

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # OPTIMIZATION 2: Docker BuildKit Caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./infra/docker/backend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.owner }}/backend:${{ github.sha }}
            ghcr.io/${{ steps.lowercase.outputs.owner }}/backend:latest
          cache-from: |
            type=gha,scope=backend
            type=registry,ref=ghcr.io/${{ steps.lowercase.outputs.owner }}/backend:latest
          cache-to: type=gha,mode=max,scope=backend
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Clean up Docker build cache
        if: always()
        run: |
          echo "=== Cleaning up Docker to free space ==="
          docker system prune -af --volumes
          echo "=== Disk space after Docker cleanup ==="
          df -h

  # ========================================
  # OPTIMIZATION 3: Parallel Jobs - Build Frontend
  # ========================================
  build-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend]
    if: |
      always() && 
      (needs.detect-changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # OPTIMIZATION 2: Docker BuildKit Caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./infra/docker/frontend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.owner }}/frontend:${{ github.sha }}
            ghcr.io/${{ steps.lowercase.outputs.owner }}/frontend:latest
          cache-from: |
            type=gha,scope=frontend
            type=registry,ref=ghcr.io/${{ steps.lowercase.outputs.owner }}/frontend:latest
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # ========================================
  # Security Scanning (Parallel after builds)
  # ========================================
  scan-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    if: always() && needs.build-backend.result == 'success'
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scan on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ steps.lowercase.outputs.owner }}/backend:${{ github.sha }}'
          format: 'json'
          output: 'trivy-backend-results.json'
          exit-code: '0'
          severity: 'CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln'
          timeout: '5m'

      - name: Display Trivy results
        if: always()
        run: |
          if [ -f trivy-backend-results.json ]; then
            echo "=== Trivy Scan Results (Backend) ==="
            jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | "\(.VulnerabilityID) - \(.PkgName) \(.InstalledVersion) → \(.FixedVersion) [\(.Severity)]"' trivy-backend-results.json || echo "No CRITICAL vulnerabilities found"
          fi

      - name: Check for fixable vulnerabilities
        id: check-vulns
        run: |
          if [ -f trivy-backend-results.json ]; then
            FIXABLE=$(jq '[.Results[]?.Vulnerabilities[]? | select(.FixedVersion != "")] | length' trivy-backend-results.json)
            echo "fixable_count=$FIXABLE" >> $GITHUB_OUTPUT
            if [ "$FIXABLE" -gt 0 ]; then
              echo "⚠️ Found $FIXABLE fixable vulnerabilities"
              echo "Run the 'Auto-Fix Security Vulnerabilities' workflow to automatically create a PR with fixes"
            fi
          fi

      - name: Fail if critical vulnerabilities exist
        run: |
          if [ -f trivy-backend-results.json ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-backend-results.json)
            if [ "$CRITICAL" -gt 0 ]; then
              echo "❌ Found $CRITICAL CRITICAL vulnerabilities!"
              exit 1
            fi
          fi

  scan-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    if: always() && needs.build-frontend.result == 'success'
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scan on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ steps.lowercase.outputs.owner }}/frontend:${{ github.sha }}'
          format: 'json'
          output: 'trivy-frontend-results.json'
          exit-code: '0'
          severity: 'CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln'
          timeout: '5m'

      - name: Display Trivy results (Frontend)
        if: always()
        run: |
          if [ -f trivy-frontend-results.json ]; then
            echo "=== Trivy Scan Results (Frontend) ==="
            jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | "\(.VulnerabilityID) - \(.PkgName) \(.InstalledVersion) → \(.FixedVersion) [\(.Severity)]"' trivy-frontend-results.json || echo "No CRITICAL vulnerabilities found"
          fi

      - name: Fail if critical vulnerabilities exist (Frontend)
        run: |
          if [ -f trivy-frontend-results.json ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-frontend-results.json)
            if [ "$CRITICAL" -gt 0 ]; then
              echo "❌ Found $CRITICAL CRITICAL vulnerabilities in frontend!"
              exit 1
            fi
          fi

  # ========================================
  # Deployment (runs after all builds and scans pass)
  # ========================================
  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [detect-changes, build-backend, build-frontend, scan-backend, scan-frontend]
    if: |
      always() &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.scan-backend.result == 'success' || needs.scan-backend.result == 'skipped') &&
      (needs.scan-frontend.result == 'success' || needs.scan-frontend.result == 'skipped')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner for deploy
        id: deploy_lowercase
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export GHCR_USER=${{ github.actor }}
            export GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
            export GHCR_REPOSITORY_OWNER=${{ steps.deploy_lowercase.outputs.owner }}
            
            cd ${{ secrets.VM_PROJECT_PATH }}
            
            # Pull latest code to ensure we have the latest deploy scripts
            git fetch origin
            git reset --hard origin/main
            
            if [ -n "${{ secrets.ENV_FILE_PRODUCTION }}" ]; then
              echo "${{ secrets.ENV_FILE_PRODUCTION }}" > .env
            fi
            
            ./infra/scripts/deploy.sh ${{ github.sha }}

  rollback:
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback_sha
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository owner for rollback
        id: rollback_lowercase
        run: echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Rollback to previous SHA
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export GHCR_USER=${{ github.actor }}
            export GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
            export GHCR_REPOSITORY_OWNER=${{ steps.rollback_lowercase.outputs.owner }}
            
            cd ${{ secrets.VM_PROJECT_PATH }}
            
            # Pull latest code to ensure we have the latest deploy scripts
            git fetch origin
            git reset --hard origin/main
            
            if [ -n "${{ secrets.ENV_FILE_PRODUCTION }}" ]; then
              echo "${{ secrets.ENV_FILE_PRODUCTION }}" > .env
            fi
            
            ./infra/scripts/deploy.sh ${{ github.event.inputs.rollback_sha }}

