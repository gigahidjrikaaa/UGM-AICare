services:
  #################
  # Database (PostgreSQL)
  #################
  db:
    image: postgres:16-alpine # Using Alpine for smaller size
    container_name: ugm_aicare_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # Use default if not set in .env
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist data
    # ports: # No need to expose DB directly to host
    #   - "${POSTGRES_PORT}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network # Only on the internal network


  #################
  # Cache (Redis)
  #################
  redis:
    image: redis/redis-stack-server:latest
    container_name: ugm_aicare_redis
    volumes:
      - redisdata:/data
    # ports: # No need to expose Redis directly to host
    #   - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network # Only on the internal network

  #################
  # Object Storage (MinIO)
  #################
  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: ugm_aicare_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    # ports: # No need to expose MinIO directly to host
    #   - "${MINIO_PORT:-9000}:9000"
    #   - "${MINIO_CONSOLE_PORT:-9001}:9001"
    restart: unless-stopped
    networks:
      - internal_network

  #################
  # Backend (FastAPI)
  #################
  backend:
    container_name: ugm_aicare_backend
    image: ghcr.io/${GHCR_REPOSITORY_OWNER:-gigahidjrikaaa}/backend:${GIT_SHA}
    ports: # Expose this service directly to the host
      - "8000:8000"
    # env_file is passed via --env-file flag in deploy.sh
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      FRONTEND_URL: http://localhost:4000 # Reverted
      BACKEND_URL: http://localhost:8000 # Reverted
      ALLOWED_ORIGINS: "http://localhost:4000,http://127.0.0.1:4000" # Reverted
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: ""
      REDIS_PASSWORD: ""
      REDIS_URL: ""
      APP_ENV: production
      PYTHONPATH: /app
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-content-resources}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      # Critical auth/API keys from .env
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    restart: unless-stopped
    networks:
      internal_network: {}
    dns: 8.8.8.8

  #################
  # Frontend (Next.js)
  #################
  frontend:
    container_name: ugm_aicare_frontend
    image: ghcr.io/${GHCR_REPOSITORY_OWNER:-gigahidjrikaaa}/frontend:${GIT_SHA}
    ports: # Expose this service directly to the host
      - "4000:3000"
    # env_file is passed via --env-file flag in deploy.sh
    environment:
      NODE_ENV: production
      PORT: 3000
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      INTERNAL_API_URL: http://backend:8000 # Internal communication within Docker network
      NEXT_PUBLIC_API_URL: http://localhost:8000/api # Reverted
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - internal_network

# Define named volumes for data persistence
volumes:
  pgdata:
  redisdata:
  minio_data:

networks:
  internal_network:
    driver: bridge
