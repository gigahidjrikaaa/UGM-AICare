"""add_campaign_tables_phase5

Revision ID: 87ae07d03632
Revises: 43029bbefb9d
Create Date: 2025-10-17 05:07:49.438828
"""

from __future__ import annotations

from typing import Any

from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '87ae07d03632'
down_revision: str | None = '43029bbefb9d'
branch_labels: tuple[str, ...] | None = None
depends_on: tuple[str, ...] | str | None = None


def upgrade() -> None:
    """Apply schema (and optional data) upgrades."""
    schema_upgrade()
    if _should_run_data_migrations():
        data_upgrade()


def downgrade() -> None:
    """Revert schema (and optional data) upgrades."""
    if _should_run_data_migrations():
        data_downgrade()
    schema_downgrade()


def schema_upgrade() -> None:
    # Make migration idempotent - check existence before modifying
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_intervention_agent_settings_id', table_name='intervention_agent_settings', if_exists=True)
    op.drop_table('intervention_agent_settings', if_exists=True)
    op.alter_column('agent_health_logs', 'error_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('agent_users', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('agent_users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('agent_users_email_key', 'agent_users', type_='unique')
    op.drop_index('ix_agent_users_email', table_name='agent_users')
    op.drop_index('ix_agent_users_role', table_name='agent_users')
    op.drop_column('agent_users', 'is_active')
    op.drop_column('agent_users', 'name')
    op.drop_column('agent_users', 'metadata')
    op.drop_column('agent_users', 'updated_at')
    op.drop_column('agent_users', 'email')
    op.drop_index('ix_alerts_seen_created', table_name='alerts')
    op.alter_column('campaign_metrics', 'messages_sent',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('campaign_metrics', 'users_targeted',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('campaign_metrics', 'users_engaged',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('campaign_triggers', 'match_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('cases', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'user_hash',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index('idx_cases_assigned_to', table_name='cases')
    op.drop_index('idx_cases_conversation_id', table_name='cases')
    op.drop_index('idx_cases_created_at', table_name='cases')
    op.drop_index('idx_cases_severity', table_name='cases')
    op.drop_index('idx_cases_status', table_name='cases')
    op.drop_index('ix_cases_assigned_to', table_name='cases')
    op.drop_index('ix_cases_status', table_name='cases', if_exists=True)
    
    # Add columns to consents table with existence checks
    existing_columns = {col['name'] for col in inspector.get_columns('consents')}
    if 'subject_id' not in existing_columns:
        op.add_column('consents', sa.Column('subject_id', sa.String(), nullable=False))
    if 'evidence_uri' not in existing_columns:
        op.add_column('consents', sa.Column('evidence_uri', sa.String(), nullable=True))
    op.alter_column('consents', 'granted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.drop_index('ix_consents_scope', table_name='consents')
    op.drop_index('ix_consents_user_id', table_name='consents')
    op.create_unique_constraint('uq_consents_active', 'consents', ['subject_id', 'scope', 'revoked_at'])
    op.drop_constraint('consents_user_id_fkey', 'consents', type_='foreignkey')
    op.drop_column('consents', 'created_at')
    op.drop_column('consents', 'updated_at')
    op.drop_column('consents', 'user_id')
    op.drop_column('consents', 'granted')
    
    # Add columns to events table with existence checks
    existing_columns = {col['name'] for col in inspector.get_columns('events')}
    if 'user_hash' not in existing_columns:
        op.add_column('events', sa.Column('user_hash', sa.String(), nullable=False))
    if 'session_id' not in existing_columns:
        op.add_column('events', sa.Column('session_id', sa.String(), nullable=True))
    if 'intent' not in existing_columns:
        op.add_column('events', sa.Column('intent', sa.String(), nullable=True))
    if 'risk_flag' not in existing_columns:
        op.add_column('events', sa.Column('risk_flag', sa.SmallInteger(), nullable=True))
    if 'step' not in existing_columns:
        op.add_column('events', sa.Column('step', sa.String(), nullable=False))
    if 'resource_id' not in existing_columns:
        op.add_column('events', sa.Column('resource_id', sa.String(), nullable=True))
    if 'latency_ms' not in existing_columns:
        op.add_column('events', sa.Column('latency_ms', sa.Integer(), nullable=True))
    if 'tokens_in' not in existing_columns:
        op.add_column('events', sa.Column('tokens_in', sa.Integer(), nullable=True))
    if 'tokens_out' not in existing_columns:
        op.add_column('events', sa.Column('tokens_out', sa.Integer(), nullable=True))
    if 'cost_cents' not in existing_columns:
        op.add_column('events', sa.Column('cost_cents', sa.Integer(), nullable=True))
    if 'outcome' not in existing_columns:
        op.add_column('events', sa.Column('outcome', sa.String(), nullable=True))
    if 'consent_scope' not in existing_columns:
        op.add_column('events', sa.Column('consent_scope', sa.String(), nullable=True))
    op.alter_column('events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_events_agent', table_name='events')
    op.drop_index('ix_events_conversation_id', table_name='events')
    op.drop_index('ix_events_user_id', table_name='events')
    op.create_index('ix_events_agent_created_at', 'events', ['agent', 'created_at'], unique=False)
    op.create_index('ix_events_intent_created_at', 'events', ['intent', 'created_at'], unique=False)
    op.create_index('ix_events_risk_flag_created_at', 'events', ['risk_flag', 'created_at'], unique=False)
    op.create_index(op.f('ix_events_user_hash'), 'events', ['user_hash'], unique=False)
    op.drop_constraint('events_conversation_id_fkey', 'events', type_='foreignkey')
    op.drop_constraint('events_user_id_fkey', 'events', type_='foreignkey')
    op.drop_column('events', 'user_id')
    op.drop_column('events', 'metadata')
    op.drop_column('events', 'event_type')
    op.drop_column('events', 'updated_at')
    op.drop_column('events', 'conversation_id')
    op.create_index(op.f('ix_flagged_sessions_id'), 'flagged_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_flagged_sessions_status'), 'flagged_sessions', ['status'], unique=False)
    op.create_foreign_key(None, 'flagged_sessions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'flagged_sessions', 'users', ['flagged_by_admin_id'], ['id'])
    op.alter_column('insights_reports', 'high_risk_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('insights_reports', 'assessment_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    
    # Add columns to messages table with existence checks
    existing_columns = {col['name'] for col in inspector.get_columns('messages')}
    if 'session_id' not in existing_columns:
        op.add_column('messages', sa.Column('session_id', sa.String(), nullable=False))
    if 'content_redacted' not in existing_columns:
        op.add_column('messages', sa.Column('content_redacted', sa.Text(), nullable=False))
    if 'tools_used' not in existing_columns:
        op.add_column('messages', sa.Column('tools_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    if 'trace_id' not in existing_columns:
        op.add_column('messages', sa.Column('trace_id', sa.String(), nullable=True))
    if 'ts' not in existing_columns:
        op.add_column('messages', sa.Column('ts', sa.DateTime(timezone=True), nullable=False))
    op.drop_index('ix_messages_agent', table_name='messages')
    op.drop_index('ix_messages_conversation_id', table_name='messages')
    op.drop_index('ix_messages_created_at', table_name='messages')
    op.drop_index('ix_messages_user_id', table_name='messages')
    op.create_index(op.f('ix_messages_session_id'), 'messages', ['session_id'], unique=False)
    op.create_index('ix_messages_tools_used', 'messages', ['tools_used'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_messages_ts'), 'messages', ['ts'], unique=False)
    op.drop_constraint('messages_user_id_fkey', 'messages', type_='foreignkey')
    op.drop_constraint('messages_conversation_id_fkey', 'messages', type_='foreignkey')
    op.drop_column('messages', 'created_at')
    op.drop_column('messages', 'user_id')
    op.drop_column('messages', 'content')
    op.drop_column('messages', 'agent')
    op.drop_column('messages', 'metadata')
    op.drop_column('messages', 'conversation_id')
    op.alter_column('psychologists', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('psychologists', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('uq_psychologists_user_id', 'psychologists', type_='unique')
    op.drop_index('ix_psychologists_user_id', table_name='psychologists')
    op.create_index(op.f('ix_psychologists_user_id'), 'psychologists', ['user_id'], unique=True)
    
    # Add columns to resources table with existence checks
    existing_columns = {col['name'] for col in inspector.get_columns('resources')}
    if 'resource_id' not in existing_columns:
        op.add_column('resources', sa.Column('resource_id', sa.String(), nullable=False))
    if 'category' not in existing_columns:
        op.add_column('resources', sa.Column('category', sa.String(), nullable=True))
    if 'eligibility' not in existing_columns:
        op.add_column('resources', sa.Column('eligibility', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    if 'contact' not in existing_columns:
        op.add_column('resources', sa.Column('contact', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    if 'active' not in existing_columns:
        op.add_column('resources', sa.Column('active', sa.Boolean(), nullable=False))
    op.alter_column('resources', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_resources_type', table_name='resources')
    op.drop_column('resources', 'created_at')
    op.drop_column('resources', 'tags')
    op.drop_column('resources', 'id')
    op.drop_column('resources', 'content')
    op.drop_column('resources', 'type')
    op.drop_column('resources', 'metadata')
    op.drop_column('resources', 'description')
    op.drop_index('idx_triage_created_at', table_name='triage_assessments')
    op.drop_index('idx_triage_severity_level', table_name='triage_assessments')
    op.create_index(op.f('ix_user_summaries_id'), 'user_summaries', ['id'], unique=False)
    # ### end Alembic commands ###


def schema_downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_summaries_id'), table_name='user_summaries')
    op.create_index('idx_triage_severity_level', 'triage_assessments', ['severity_level'], unique=False)
    op.create_index('idx_triage_created_at', 'triage_assessments', ['created_at'], unique=False)
    op.add_column('resources', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('resources', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('resources', sa.Column('type', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('resources', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('resources', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('resources', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('resources', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.create_index('ix_resources_type', 'resources', ['type'], unique=False)
    op.alter_column('resources', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('resources', 'active')
    op.drop_column('resources', 'contact')
    op.drop_column('resources', 'eligibility')
    op.drop_column('resources', 'category')
    op.drop_column('resources', 'resource_id')
    op.drop_index(op.f('ix_psychologists_user_id'), table_name='psychologists')
    op.create_index('ix_psychologists_user_id', 'psychologists', ['user_id'], unique=False)
    op.create_unique_constraint('uq_psychologists_user_id', 'psychologists', ['user_id'])
    op.alter_column('psychologists', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('psychologists', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('messages', sa.Column('conversation_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('messages', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('messages', sa.Column('agent', postgresql.ENUM('STA', 'SCA', 'SDA', 'IA', name='agent_name_enum'), autoincrement=False, nullable=True))
    op.add_column('messages', sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('messages', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('messages', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.create_foreign_key('messages_conversation_id_fkey', 'messages', 'conversations', ['conversation_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('messages_user_id_fkey', 'messages', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_messages_ts'), table_name='messages')
    op.drop_index('ix_messages_tools_used', table_name='messages', postgresql_using='gin')
    op.drop_index(op.f('ix_messages_session_id'), table_name='messages')
    op.create_index('ix_messages_user_id', 'messages', ['user_id'], unique=False)
    op.create_index('ix_messages_created_at', 'messages', ['created_at'], unique=False)
    op.create_index('ix_messages_conversation_id', 'messages', ['conversation_id'], unique=False)
    op.create_index('ix_messages_agent', 'messages', ['agent'], unique=False)
    op.drop_column('messages', 'ts')
    op.drop_column('messages', 'trace_id')
    op.drop_column('messages', 'tools_used')
    op.drop_column('messages', 'content_redacted')
    op.drop_column('messages', 'session_id')
    op.alter_column('insights_reports', 'assessment_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('insights_reports', 'high_risk_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'flagged_sessions', type_='foreignkey')
    op.drop_constraint(None, 'flagged_sessions', type_='foreignkey')
    op.drop_index(op.f('ix_flagged_sessions_status'), table_name='flagged_sessions')
    op.drop_index(op.f('ix_flagged_sessions_id'), table_name='flagged_sessions')
    op.add_column('events', sa.Column('conversation_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('events_user_id_fkey', 'events', 'users', ['user_id'], ['id'])
    op.create_foreign_key('events_conversation_id_fkey', 'events', 'conversations', ['conversation_id'], ['id'])
    op.drop_index(op.f('ix_events_user_hash'), table_name='events')
    op.drop_index('ix_events_risk_flag_created_at', table_name='events')
    op.drop_index('ix_events_intent_created_at', table_name='events')
    op.drop_index('ix_events_agent_created_at', table_name='events')
    op.create_index('ix_events_user_id', 'events', ['user_id'], unique=False)
    op.create_index('ix_events_conversation_id', 'events', ['conversation_id'], unique=False)
    op.create_index('ix_events_agent', 'events', ['agent'], unique=False)
    op.alter_column('events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('events', 'consent_scope')
    op.drop_column('events', 'outcome')
    op.drop_column('events', 'cost_cents')
    op.drop_column('events', 'tokens_out')
    op.drop_column('events', 'tokens_in')
    op.drop_column('events', 'latency_ms')
    op.drop_column('events', 'resource_id')
    op.drop_column('events', 'step')
    op.drop_column('events', 'risk_flag')
    op.drop_column('events', 'intent')
    op.drop_column('events', 'session_id')
    op.drop_column('events', 'user_hash')
    op.add_column('consents', sa.Column('granted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('consents', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('consents', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('consents', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.create_foreign_key('consents_user_id_fkey', 'consents', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('uq_consents_active', 'consents', type_='unique')
    op.create_index('ix_consents_user_id', 'consents', ['user_id'], unique=False)
    op.create_index('ix_consents_scope', 'consents', ['scope'], unique=False)
    op.alter_column('consents', 'granted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_column('consents', 'evidence_uri')
    op.drop_column('consents', 'subject_id')
    op.create_index('ix_cases_status', 'cases', ['status'], unique=False)
    op.create_index('ix_cases_assigned_to', 'cases', ['assigned_to'], unique=False)
    op.create_index('idx_cases_status', 'cases', ['status'], unique=False)
    op.create_index('idx_cases_severity', 'cases', ['severity'], unique=False)
    op.create_index('idx_cases_created_at', 'cases', ['created_at'], unique=False)
    op.create_index('idx_cases_conversation_id', 'cases', ['conversation_id'], unique=False)
    op.create_index('idx_cases_assigned_to', 'cases', ['assigned_to'], unique=False)
    op.alter_column('cases', 'user_hash',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('cases', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cases', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('campaign_triggers', 'match_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('campaign_metrics', 'users_engaged',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('campaign_metrics', 'users_targeted',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('campaign_metrics', 'messages_sent',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_index('ix_alerts_seen_created', 'alerts', ['is_seen', 'created_at'], unique=False)
    op.add_column('agent_users', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('agent_users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('agent_users', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('agent_users', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('agent_users', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.create_index('ix_agent_users_role', 'agent_users', ['role'], unique=False)
    op.create_index('ix_agent_users_email', 'agent_users', ['email'], unique=False)
    op.create_unique_constraint('agent_users_email_key', 'agent_users', ['email'])
    op.alter_column('agent_users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('agent_users', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('agent_health_logs', 'error_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('intervention_agent_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('auto_mode_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('human_review_required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('risk_score_threshold', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('daily_send_limit', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('channels_enabled', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('escalation_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('office_hours_start', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('office_hours_end', sa.VARCHAR(length=16), autoincrement=False, nullable=True),
    sa.Column('manual_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='intervention_agent_settings_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='intervention_agent_settings_pkey')
    )
    op.create_index('ix_intervention_agent_settings_id', 'intervention_agent_settings', ['id'], unique=False)
    # ### end Alembic commands ###


def data_upgrade() -> None:
    """Idempotent data migrations executed with --x data=true."""
    pass


def data_downgrade() -> None:
    """Rollback for data migrations executed with --x data=true."""
    pass


def _should_run_data_migrations() -> bool:
    """Return True when the revision is invoked with ``--x data=true``."""
    x_args: dict[str, Any] = context.get_x_argument(as_dictionary=True)
    flag = x_args.get("data")
    if isinstance(flag, str):
        return flag.lower() in {"1", "true", "yes", "on"}
    return bool(flag)
