"""Add intervention plan records tables

Revision ID: 042b575a9fe3
Revises: 34aac38a6100
Create Date: 2025-10-07 09:06:09.927487
"""

from __future__ import annotations

from typing import Any

from alembic import context
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '042b575a9fe3'
down_revision: str | None = '34aac38a6100'
branch_labels: tuple[str, ...] | None = None
depends_on: tuple[str, ...] | str | None = None


def upgrade() -> None:
    """Apply schema (and optional data) upgrades."""
    schema_upgrade()
    if _should_run_data_migrations():
        data_upgrade()


def downgrade() -> None:
    """Revert schema (and optional data) upgrades."""
    if _should_run_data_migrations():
        data_downgrade()
    schema_downgrade()


def schema_upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Get inspector for idempotent checks
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Create intervention_plan_records table if it doesn't exist
    if 'intervention_plan_records' not in existing_tables:
        op.create_table('intervention_plan_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('conversation_id', sa.Integer(), nullable=True),
    sa.Column('plan_title', sa.String(length=500), nullable=False),
    sa.Column('risk_level', sa.Integer(), nullable=True),
    sa.Column('plan_data', sa.JSON(), nullable=False),
    sa.Column('completion_tracking', sa.JSON(), nullable=False),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('completed_steps', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_viewed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
        op.create_index(op.f('ix_intervention_plan_records_conversation_id'), 'intervention_plan_records', ['conversation_id'], unique=False)
        op.create_index(op.f('ix_intervention_plan_records_created_at'), 'intervention_plan_records', ['created_at'], unique=False)
        op.create_index(op.f('ix_intervention_plan_records_id'), 'intervention_plan_records', ['id'], unique=False)
        op.create_index(op.f('ix_intervention_plan_records_session_id'), 'intervention_plan_records', ['session_id'], unique=False)
        op.create_index(op.f('ix_intervention_plan_records_status'), 'intervention_plan_records', ['status'], unique=False)
        op.create_index(op.f('ix_intervention_plan_records_user_id'), 'intervention_plan_records', ['user_id'], unique=False)
    
    # Create intervention_plan_step_completions table if it doesn't exist
    if 'intervention_plan_step_completions' not in existing_tables:
        op.create_table('intervention_plan_step_completions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('step_index', sa.Integer(), nullable=False),
    sa.Column('step_title', sa.String(length=500), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['plan_id'], ['intervention_plan_records.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
        op.create_index(op.f('ix_intervention_plan_step_completions_id'), 'intervention_plan_step_completions', ['id'], unique=False)
        op.create_index(op.f('ix_intervention_plan_step_completions_plan_id'), 'intervention_plan_step_completions', ['plan_id'], unique=False)
    # ### end Alembic commands ###


def schema_downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_intervention_plan_step_completions_plan_id'), table_name='intervention_plan_step_completions')
    op.drop_index(op.f('ix_intervention_plan_step_completions_id'), table_name='intervention_plan_step_completions')
    op.drop_table('intervention_plan_step_completions')
    op.drop_index(op.f('ix_intervention_plan_records_user_id'), table_name='intervention_plan_records')
    op.drop_index(op.f('ix_intervention_plan_records_status'), table_name='intervention_plan_records')
    op.drop_index(op.f('ix_intervention_plan_records_session_id'), table_name='intervention_plan_records')
    op.drop_index(op.f('ix_intervention_plan_records_id'), table_name='intervention_plan_records')
    op.drop_index(op.f('ix_intervention_plan_records_created_at'), table_name='intervention_plan_records')
    op.drop_index(op.f('ix_intervention_plan_records_conversation_id'), table_name='intervention_plan_records')
    op.drop_table('intervention_plan_records')
    # ### end Alembic commands ###


def data_upgrade() -> None:
    """Idempotent data migrations executed with --x data=true."""
    pass


def data_downgrade() -> None:
    """Rollback for data migrations executed with --x data=true."""
    pass


def _should_run_data_migrations() -> bool:
    """Return True when the revision is invoked with ``--x data=true``."""
    x_args: dict[str, Any] = context.get_x_argument(as_dictionary=True)
    flag = x_args.get("data")
    if isinstance(flag, str):
        return flag.lower() in {"1", "true", "yes", "on"}
    return bool(flag)
